name: Test

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    
    - name: Install psql headers
      run: sudo apt install libpq-dev
    
    - name: Setup Postgres Server
      uses: SoftwareparkVeroo/postgresql-action@master
      with:
        postgresql version: latest
        postgresql init scripts: ./init.sql
    
    - name: Install Rust Nightly
      uses: actions-rs/toolchain@v1.0.3
      with:
        toolchain: nightly
        profile: minimal
        default: true

    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      id: cache
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Prepare .env file
      run: echo "${{ secrets.ENV_FILE }}" > "$GITHUB_WORKSPACE/.env"
  
    - name: Prepare Rocket.toml file
      run: cp "$GITHUB_WORKSPACE/Rocket.toml.example" "$GITHUB_WORKSPACE/Rocket.toml"

    - name: Install diesel
      uses: actions-rs/cargo@v1.0.1
      with:
        command: install
        args: diesel_cli --no-default-features --features postgres
    
    - name: Run migrations
      run: diesel migration run

    - name: Cargo build
      uses: actions-rs/cargo@v1.0.1
      with:
        command: build

    - uses: actions-rs/cargo@v1.0.1
      with:
        command: test
        args: --no-fail-fast
      env:
        CARGO_INCREMENTAL: '0'
        RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zno-landing-pads'
    
    - id: coverage
      uses: actions-rs/grcov@v0.1.4
  
    - name: Upload to Codecov
      uses: codecov/codecov-action@v1.0.5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ${{ steps.coverage.outputs.report }}
        fail_ci_if_error: true
